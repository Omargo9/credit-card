{"version":3,"sources":["Components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["Inputs","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","name","date","changeNumber","bind","assertThisInitialized","changeName","changeDate","event","target","length","isNaN","Number","setState","react_default","a","createElement","className","src","slice","padEnd","toUpperCase","placeholder","type","onChange","Component","App","Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.062cd02f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Inputs extends Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n          value: '',\r\n          name:\"\",\r\n          date:\"\"\r\n          \r\n        }\r\n        this.changeNumber = this.changeNumber.bind(this)\r\n        this.changeName = this.changeName.bind(this)\r\n        this.changeDate = this.changeDate.bind(this)\r\n      }\r\n    \r\n      changeNumber (event) {\r\n        \r\n         if(event.target.value.length<17 &&  !isNaN(Number(event.target.value))){\r\n         \r\n        this.setState({ \r\n          \r\n            value:event.target.value\r\n            \r\n          })  }       \r\n      }\r\n      changeName (event) {\r\n        \r\n        if(event.target.value.length<17 &&  isNaN(event.target.value)){\r\n       this.setState({ \r\n         \r\n           name:event.target.value\r\n           \r\n         })  }       \r\n     }\r\n     changeDate (event) {\r\n        \r\n      if(event.target.value.length<5 &&  !isNaN(event.target.value)){\r\n     this.setState({ \r\n       \r\n         date:event.target.value\r\n         \r\n       })  }       \r\n   }\r\n       \r\n        \r\n        \r\n      \r\n\r\n    render(){\r\n        return ( \r\n            <div className=\"Project\">\r\n            <div className=\"Credit\">\r\n                <div className=\"credit-card-text\">\r\n                   <span> CREDIT CARD</span>\r\n                </div>\r\n                <div className=\"puce-logo\">\r\n                   <img src=\"http://jamesdelaney.ie/dev/chip.png\" />\r\n                </div>\r\n\r\n             <div className=\"card-information\">\r\n              <div className=\"logo-information\">\r\n               <div className=\"master-number\">\r\n                 <span>{(this.state.value.slice(0,4)+\" \"+this.state.value.slice(4,8)+\" \"+this.state.value.slice(8,12)+\" \"+this.state.value.slice(12,16)).padEnd(18,'X')}</span>\r\n               </div>\r\n\r\n               <div className=\"holder-card\">\r\n                 <div className=\"master-short-number\">\r\n                    <span>5257</span>\r\n                 </div>\r\n                 <div className=\"holder-card-text\">\r\n                   <div className=\"month-year\">\r\n                     <span> MONTH/YEAR </span>\r\n                   </div>\r\n                   <div className=\"holder-card-right\">\r\n                     <div className=\"valid\">\r\n                       {\" \"}\r\n                       <span> VALID THIRU</span>\r\n                     </div>\r\n                     <div className=\"date\">\r\n                       <span>{(this.state.date.slice(0,2)<13?this.state.date.slice(0,2):12+\"/\"+this.state.date.slice(2,4)).padEnd(5,'-')}</span>\r\n                     </div>\r\n                   </div>\r\n                 </div>\r\n               </div>\r\n\r\n               <div className=\"holder-card-text\">\r\n                 <h1>{this.state.name.padEnd(15,'*').toUpperCase()}</h1>\r\n               </div>\r\n             </div>\r\n\r\n             <div className=\"master-logo\">\r\n               <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTp0S9gQ6Za6OyM5cS2tZoNC1ONHFDnWcPsPDTxSC5c4a8KYAj9DA\" />\r\n             </div>\r\n           </div>\r\n         </div>\r\n            <div className=\"inputs\">\r\n            \r\n            <input placeholder=\"CARD NUMBER\" type=\"text\" value={this.state.value} onChange={this.changeNumber} />\r\n            \r\n            \r\n            \r\n            <input placeholder=\"YOUR NAME\" type=\"text\" value={this.state.name} onChange={this.changeName}/>\r\n            \r\n            \r\n            <input placeholder=\"XX/YY\" type=\"text\" value={this.state.date} onChange={this.changeDate}/>\r\n            </div>\r\n          </div>\r\n          );\r\n    }  }\r\n  \r\n \r\nexport default Inputs;\r\n","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport Inputs from './Components/Header'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      \n\n\n         <Inputs/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}